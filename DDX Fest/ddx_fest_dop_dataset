-- with main_table as (
-- 		select tp.id,
-- 		        tp.transaction_id, 
-- 		        tr.payment_transaction_id,
-- 		        c."name"  club_name,
-- 		        tp.discount_id,
-- 		        d.name as discount_name,
-- 		        tp.product_id, 
-- 		        tp.product_name, 
-- 		        tp.quantity as quantity,
-- 		        sum(tp.quantity) over (partition by (tr.updated_at+interval '3' hour)::date, product_id order by (tr.updated_at+interval '3' hour)::date) last_qty,
-- 		        tp.price, 
-- 		        tp.total_amount as amount,
-- 		        tr.type, 
-- 		        tr.user_id, 
-- 		        u.email, 
-- 		        u.name,
-- 		        u.last_name,
-- 		        u.phone,
-- 		        (tr.updated_at+interval '3' hour)::date date, 
-- 		        case when t.if_employee is null then 'Клиент' else  t.if_employee end if_employee
-- 		from ddxfitness_prod_v2.pg_transaction_products tp
-- 		left join ddxfitness_prod_v2.pg_transactions tr 
-- 		  on tp.transaction_id = tr.id
-- 		left join ddxfitness_prod_v2.pg_club_legal_infos cli
-- 			on tr.club_legal_info_id = cli.id
-- 		left join ddxfitness_prod_v2.pg_clubs c 
-- 			on cli.club_id = c.id
-- 		left join ddxfitness_prod_v2.pg_users u
-- 			on tr.user_id = u.id
-- 		left join ddxfitness_prod_v2.pg_discounts d
-- 			on tp.discount_id = d.id
-- 		left join (
--           select 
--               user_id,
--               case when payment_plan_id in (1,111,152) then 'Сотрудник' else 'Клиент' end as if_employee
--           from ddxfitness_prod_v2.pg_user_payment_plans
--           where status not in ('Ended','Created','Deleted','Refunded','NonStarted')
--             and payment_plan_id in (
--                 1,111,161,152,10,18,19,20,21,22,28,35,45,46,49,70,71,73,74,76,92,93,
--                 118,135,140,162,241,242,243,244,245,246,277,278
--             )
--           group by 1,2
--         ) t
-- 		on tr.user_id = t.user_id 
-- 		where tp.product_id in (300, 301)
-- ), 
-- refund_transactions as (
-- 		select l.*, 
-- 		       coalesce(t.refund_transaction, 0) as refund_transaction, 
-- 		       t.quantity_refund, 
-- 		       t.amount_refund
-- 		from main_table l 
-- 		left join (
--             select 
--                 transaction_id,
--                 payment_transaction_id as refund_transaction,
--                 product_id, 
--                 quantity as quantity_refund,
--                 amount as amount_refund
--             from main_table 
--             where type = 'refund'
--         ) t 
--         on l.transaction_id = t.refund_transaction 
--         and l.product_id = t.product_id
-- )
-- select *, 
--        case when transaction_id = refund_transaction then amount - amount_refund else amount end as amount_new,
--        case when transaction_id = refund_transaction then quantity - quantity_refund else quantity end as quantity_new,
--        case when transaction_id = refund_transaction then 'refund' else 'payment' end as type_new
-- from refund_transactions 
-- where type <> 'refund'; --and date > '2025-1-1';

with main_table as (
	select * from ddxfitness_prod_v2.bi_ddx_fest
), 
refund_transactions as (
	select l.*, 
	       coalesce(t.refund_transaction, 0) as refund_transaction, 
	       t.quantity_refund, 
	       t.amount_refund
	from main_table l 
	left join (
		select 
			transaction_id,
			payment_transaction_id as refund_transaction,
			product_id, 
			quantity as quantity_refund,
			amount as amount_refund
		from main_table 
		where type = 'refund'
	) t 
	on l.transaction_id = t.refund_transaction 
	and l.product_id = t.product_id
)
select *, 
       case when transaction_id = refund_transaction then amount - amount_refund else amount end as amount_new,
       case when transaction_id = refund_transaction then quantity - quantity_refund else quantity end as quantity_new,
       case when transaction_id = refund_transaction then 'refund' else 'payment' end as type_new
from refund_transactions 
where type <> 'refund'; --and date > '2025-1-1';
